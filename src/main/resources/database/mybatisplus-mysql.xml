<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <!-- 引入jdbc配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:properties/*.properties</value>
            </list>
        </property>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url"
                  value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- druid 连接池的 -->
        <property name="filters" value="${jdbc.filters}"/>
        <!-- 下面druid 和 dbcp 连接池通用的 ↓↓↓↓↓↓↓↓↓↓↓↓ -->
        <!--maxActive: 最大连接数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!--initialSize: 初始化连接 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!--最小连接池数量 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <!--有两个含义：1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <!--Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接。 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
    </bean>

    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.hlfc.db.mybatislpus.bean"/>
        <property name="mapperLocations" value="classpath*:mapper/**/**.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <property name="plugins">
            <array>
                <!-- 分页插件配置 -->
                <bean id="paginationInterceptor" class="com.baomidou.mybatisplus.plugins.PaginationInterceptor"/>
                <!-- 性能拦截器，兼打印sql，不建议生产环境配置,开发环境启用起来，方便调试-->
                <bean id="performanceInterceptor"
                      class="com.baomidou.mybatisplus.plugins.PerformanceInterceptor"/>
            </array>
        </property>
        <!-- MP 全局配置注入 -->
        <property name="globalConfig" ref="globalConfig"/>
    </bean>

    <!-- 定义 MP 全局策略 -->
    <bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
        <!-- 逻辑删除 定义下面3个参数-->
        <property name="sqlInjector" ref="logicSqlInjector"/>
        <property name="logicDeleteValue" value="-1"/>
        <property name="logicNotDeleteValue" value="0"/>
        <!-- 全局ID类型： 0, "数据库ID自增"， 1, "用户输入ID", 2, "全局唯一ID", 3, "全局唯一ID"-->
        <property name="idType" value="2"/>
        <!-- 2.1-gamma+ 数据库自动识别，无需配置数据库类型
        <property name="dbType" value="mysql" />
        -->
        <!-- 2.3+ 全局表前缀 mp_-->
        <!--<property name="tablePrefix" value="uam_" />-->
        <!--字段名采用下划线-->
        <!--<property name="dbColumnUnderline" value="true" />-->
        <!-- 公共字段填充处理器 -->
        <!--<property name="metaObjectHandler" ref="baseMetaObjectHandler"/>-->
        <!--数据库关键字转义符，'desc', "desc" 2.1-gamma+不需要制定-->
        <!--<property name="identifierQuote" value="'" />-->
    </bean>

    <!-- 自定义处理器 -->
    <!--<bean id="baseMetaObjectHandler" class="com.linewell.ccip.core.handle.BaseMetaObjectHandler" />-->
    <!-- 逻辑删除Sql注入器-->
    <bean id="logicSqlInjector" class="com.baomidou.mybatisplus.mapper.LogicSqlInjector"/>



    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hlfc.db.mybatislpus.dao"/>
    </bean>


    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close"
          scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!--<bean id="transactionManager"-->
          <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!-- 热加载 -->
    <!--<bean class="com.baomidou.mybatisplus.spring.MybatisMapperRefresh">-->
        <!--<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
        <!--<constructor-arg name="mapperLocations" value="classpath*:mapper/user/UserMapper.xml"/>-->
        <!--<constructor-arg name="enabled" value="true"/>-->
    <!--</bean>-->

    <!-- 开启基于注解的事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->
</beans>